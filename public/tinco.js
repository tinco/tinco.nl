// Generated by CoffeeScript 1.4.0
(function() {
  var buildColors, buildColorsRun, cycleColors, header, hsl2rgb, hue, makeHeader, p, setColors, x, y;

  hue = 0;

  cycleColors = function() {
    setColors(hsl2rgb(hue, .5, .5, 1).hex);
    hue = hue + 0.005;
    hue %= 1;
    return setTimeout(cycleColors, 50);
  };

  setColors = function(hex) {
    return $("#header td.background").css('background-color', hex);
  };

  x = 0;

  y = 0;

  hue = 0;

  p = 0;

  buildColors = function() {
    buildColorsRun();
    return setTimeout(buildColors, 3000);
  };

  buildColorsRun = function() {
    var block, getBlock, previousBlock, xx, yy;
    getBlock = function(x, y) {
      return document.getElementById('header').getElementsByTagName('tr')[y].children[x];
    };
    block = getBlock(x, y);
    if (block != null) {
      if (!block.classList.contains('colored')) {
        block.style.backgroundColor = hsl2rgb(hue, .5, .5, 1).hex;
      }
    }
    if (x - 2 >= 0) {
      previousBlock = getBlock(x - 2, y);
      if ((previousBlock != null) && !previousBlock.classList.contains('colored')) {
        previousBlock.style.backgroundColor = '';
      }
    }
    xx = x - 1;
    yy = y + 1;
    if (xx >= 0 && yy < 7) {
      x = xx;
      y = yy;
    } else {
      x = (p += 1);
      y = 0;
    }
    hue += 0.05;
    hue %= 1;
    if (p < 26) {
      return setTimeout(buildColorsRun, 10);
    } else {
      return p = x = y = hue = 0;
    }
  };

  makeHeader = function() {
    var color, header, row, table, _i, _j, _len, _len1;
    header = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
    table = "<table>";
    for (_i = 0, _len = header.length; _i < _len; _i++) {
      row = header[_i];
      table += "<tr>";
      for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
        color = row[_j];
        table += "<td class=\"" + (color === 1 ? "colored" : "background") + "\"></td>";
      }
      table += "</tr>";
    }
    table += "</table>";
    return table;
  };

  hsl2rgb = function(h, s, l, o) {
    var channels, i, rgb, t1, t2, t3, _i;
    if (h > 1 || s > 1 || l > 1) {
      h /= 360;
      s /= 100;
      l /= 100;
    }
    rgb = {};
    channels = ["r", "g", "b"];
    if (!s) {
      rgb = {
        r: l,
        g: l,
        b: l
      };
    } else {
      if (l < .5) {
        t2 = l * (1 + s);
      } else {
        t2 = l + s - l * s;
      }
      t1 = 2 * l - t2;
      for (i = _i = 0; _i <= 2; i = ++_i) {
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) {
          t3 += 1;
        }
        if (t3 > 1) {
          t3 -= 1;
        }
        if (t3 * 6 < 1) {
          rgb[channels[i]] = t1 + (t2 - t1) * 6 * t3;
        } else if (t3 * 2 < 1) {
          rgb[channels[i]] = t2;
        } else if (t3 * 3 < 2) {
          rgb[channels[i]] = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        } else {
          rgb[channels[i]] = t1;
        }
      }
    }
    rgb.r *= 255;
    rgb.g *= 255;
    rgb.b *= 255;
    rgb.hex = "#" + (16777216 | rgb.b | (rgb.g << 8) | (rgb.r << 16)).toString(16).slice(1);
    rgb.opacity = o;
    return rgb;
  };

  header = document.getElementById('header');

  header.innerHTML = makeHeader();

  buildColors();

}).call(this);
